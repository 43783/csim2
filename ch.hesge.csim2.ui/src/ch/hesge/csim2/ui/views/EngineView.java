package ch.hesge.csim2.ui.views;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import ch.hesge.csim2.core.model.IEngine;
import ch.hesge.csim2.ui.comp.EngineTable;

import javax.swing.border.LineBorder;

import com.vldocking.swing.docking.DockKey;
import com.vldocking.swing.docking.Dockable;

import java.awt.Color;

@SuppressWarnings("serial")
public class EngineView extends JPanel implements Dockable, ActionListener {

	// Private attributes
	private EngineTable engineTable;

	/**
	 * Default constructor.
	 */
	public EngineView() {
		initComponent();
	}

	/**
	 * Initialize the component
	 */
	private void initComponent() {
		
		setLayout(new BorderLayout(0, 0));
		setBorder(new LineBorder(Color.LIGHT_GRAY));
		
		engineTable = new EngineTable();
		engineTable.addActionListener(this);
		
		add(engineTable, BorderLayout.CENTER);		
	}
	
	/**
	 * Handle action generated by the view.
	 */
	public void actionPerformed(ActionEvent e) {

		if (e.getSource() == engineTable) {
			MainView mainView = (MainView) SwingUtilities.getAncestorOfClass(MainView.class, this);
			mainView.startEngine(engineTable.getSelectedValue());
		}
	}

	public DockKey getDockKey(){
        return new DockKey("engines");
    }
	
    public Component getComponent(){
        return this;
    }
	
	/**
	 * Set engines to display.
	 * 
	 * @param engines
	 *            the engines to set
	 */
	public void setEngines(List<IEngine> engines) {		
		engineTable.setEngines(engines);
	}
	
	
}
