package ch.hesge.csim2.ui.comp;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import ch.hesge.csim2.core.model.SourceClass;
import ch.hesge.csim2.core.model.SourceMethod;

@SuppressWarnings("serial")
public class SourceMethodTable extends JTable implements ActionListener {

	// Private attributes
	private Map<Integer, SourceClass> classMap;
	private List<SourceMethod> sourceMethods;
	private SourceMethodPopup contextMenu;
	private ListSelectionListener doubleClickListener;

	/**
	 * Default constructor
	 */
	public SourceMethodTable() {
		initComponent();
	}

	/**
	 * Initialize the component
	 */
	private void initComponent() {

		setRowSelectionAllowed(true);
		setGridColor(Color.LIGHT_GRAY);
		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		// Create a context menu
		contextMenu = new SourceMethodPopup(this);
		contextMenu.addActionListener(this);
		
		initModel();
		initListeners();
		initRenderer();
	}

	/**
	 * Initialize component inner listeners
	 */
	private void initListeners() {

		// Listen to single or double click
		addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				
				// Handle right-click
				if (SwingUtilities.isRightMouseButton(e)) {
					
					// Select row under the mouse
					int clickedRow = rowAtPoint(e.getPoint());
					setRowSelectionInterval(clickedRow,  clickedRow);

					// Show context menu
					contextMenu.show(e.getComponent(), e.getX(), e.getY());
					
					e.consume();										
				}
				else {
					
					if (e.getClickCount() == 2 && doubleClickListener != null) {
						doubleClickListener.valueChanged(new ListSelectionEvent(this, getSelectedRow(), getSelectedRow(), false));
					}
				}
			}
		});
	}

	/**
	 * Initialize the component's model
	 */
	private void initModel() {

		setModel(new DefaultTableModel() {

			@Override
			public int getColumnCount() {
				return 2;
			}

			@Override
			public String getColumnName(int col) {

				switch (col) {
					case 0:
						return "Class";
					case 1:
						return "Method";
				}

				return null;
			}

			@Override
			public int getRowCount() {
				if (sourceMethods == null)
					return 0;
				return sourceMethods.size();
			}

			@Override
			public boolean isCellEditable(int row, int col) {
				return false;
			}

			@Override
			public Object getValueAt(int row, int col) {

				SourceMethod method = sourceMethods.get(row);
				
				switch (col) {
					case 0:
						return classMap.get(method.getClassId()).getName();
					case 1:
						return method.getSignature();
				}

				return null;
			}
		});
	}

	/**
	 * Initialize the table renderer
	 */
	private void initRenderer() {

		// Adjust column size
		TableColumnModel columnModel = getColumnModel();
		columnModel.getColumn(0).setMaxWidth(100);
		columnModel.getColumn(0).setMinWidth(100);
	}

	/**
	 * Sets the method list to display.
	 * 
	 * @param methods
	 */
	public void setSourceMethods(List<SourceMethod> methods) {
		this.sourceMethods = methods;
		initModel();
		repaint();
	}
	
	/**
	 * Sets the class map owning methods.
	 * 
	 * @param classMap
	 */
	public void setSourceClasses(Map<Integer, SourceClass> classMap) {
		this.classMap = classMap;
	}

	/**
	 * Return the current selection
	 * 
	 * @return
	 *         a SourceMethod object
	 */
	public SourceMethod getSelectedValue() {

		int row = getSelectedRow();

		if (row > -1) {
			return sourceMethods.get(row);
		}

		return null;
	}

	/**
	 * Add an double-click listener.
	 * 
	 * @param a instance of ListSelectionListener
	 */
	public void addDoubleClickListener(ListSelectionListener listener) {
		this.doubleClickListener = listener;
	}

	/**
	 * Handle action generated by context menu.
	 */
	public void actionPerformed(ActionEvent e) {

		if (e.getActionCommand().equals("OPEN_FILE")) {
			if (doubleClickListener != null) {
				doubleClickListener.valueChanged(new ListSelectionEvent(this, getSelectedRow(), getSelectedRow(), false));
			}
		}
	}
}
