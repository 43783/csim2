package ch.hesge.csim2.ui.comp;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import ch.hesge.csim2.core.model.Trace;

@SuppressWarnings("serial")
public class TraceEntryTable extends JTable implements ActionListener {

	// Private attributes
	private List<Trace> traces;
	private TraceEntryPopup contextMenu;
	private ActionListener actionListener;

	/**
	 * Default constructor
	 */
	public TraceEntryTable() {
		initComponent();
	}

	/**
	 * Initialize the component
	 */
	private void initComponent() {

		setRowSelectionAllowed(true);
		setGridColor(Color.LIGHT_GRAY);
		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		// Create a context menu
		contextMenu = new TraceEntryPopup(this);
		contextMenu.addActionListener(this);

		initModel();
		initListeners();
		initRenderer();
	}

	/**
	 * Initialize component inner listeners
	 */
	private void initListeners() {

		// Listen to single or double click
		addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				
				// Handle right-click
				if (SwingUtilities.isRightMouseButton(e)) {
					
					// Select row under the mouse
					int clickedRow = rowAtPoint(e.getPoint());
					setRowSelectionInterval(clickedRow,  clickedRow);

					// Show context menu
					contextMenu.show(e.getComponent(), e.getX(), e.getY());
					
					e.consume();										
				}
				else {
					
					if (actionListener != null) {
					
						if (e.getClickCount() == 1) {
							actionListener.actionPerformed(new ActionEvent(this, -1, "SINGLE_CLICK"));
						}
						else if (e.getClickCount() == 2) {
							actionListener.actionPerformed(new ActionEvent(this, -1, "DOUBLE_CLICK"));
						}
					}
				}
			}
		});
	}

	/**
	 * Initialize the component's model
	 */
	private void initModel() {

		setModel(new DefaultTableModel() {

			@Override
			public int getColumnCount() {
				return 3;
			}

			@Override
			public String getColumnName(int col) {

				switch (col) {
					case 0:
						return "Class";
					case 1:
						return "Method";
					case 2:
						return "Type";
				}

				return null;
			}

			@Override
			public int getRowCount() {
				if (traces == null)
					return 0;
				return traces.size();
			}

			@Override
			public boolean isCellEditable(int row, int col) {
				return false;
			}

			@Override
			public Object getValueAt(int row, int col) {

				switch (col) {
					case 0:
						return traces.get(row).getStaticClass();
					case 1:
						return traces.get(row).getSignature();
					case 2: {
						if (traces.get(row).isEnteringTrace())
							return "ENTER";
						return "EXIT";
					}
				}

				return null;
			}
		});
	}

	/**
	 * Initialize the table renderer
	 */
	private void initRenderer() {

		// Adjust column size
		TableColumnModel columnModel = getColumnModel();
		columnModel.getColumn(0).setMaxWidth(100);
		columnModel.getColumn(0).setMinWidth(100);
	}

	/**
	 * Add an action listener to handle menu selection.
	 * 
	 * @param actionListener
	 */
	public void addActionListener(ActionListener actionListener) {
		this.actionListener = actionListener;
	}

	/**
	 * Retrieve the list this table is displaying.
	 * 
	 * @return
	 *         a list of Trace objects
	 */
	public List<Trace> getTraces() {
		return traces;
	}

	/**
	 * Sets the list this table should display.
	 * 
	 * @param traces
	 */
	public void setTraces(List<Trace> traces) {
		this.traces = traces;
		initModel();
		repaint();
	}

	/**
	 * Return the current selection
	 * 
	 * @return
	 *         a trace object
	 */
	public Trace getSelectedValue() {

		int row = getSelectedRow();

		if (row > -1) {
			return traces.get(row);
		}

		return null;
	}

	/**
	 * Handle action generated by context menu.
	 */
	public void actionPerformed(ActionEvent e) {

		if (e.getActionCommand().equals("OPEN_FILE")) {
			if (actionListener != null) {
				actionListener.actionPerformed(new ActionEvent(e.getSource(), e.getID(), "DOUBLE_CLICK"));
			}
		}
	}
}
