package ch.hesge.csim2.ui.comp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;

import ch.hesge.csim2.core.model.Scenario;
import ch.hesge.csim2.ui.model.ApplicationManager;

@SuppressWarnings("serial")
public class ScenarioPopup extends JPopupMenu implements ActionListener {

	// Private attributes
	private Scenario scenario;
	private ApplicationManager appManager;
	private JMenuItem mnuNew;
	private JMenuItem mnuRename;
	private JMenuItem mnuDelete;
	private JMenuItem mnuOpen;

	/**
	 * Default constructor
	 */
	public ScenarioPopup(ApplicationManager appManager) {
		
		this.appManager = appManager;
		initComponent();
	}

	/**
	 * Initialize the component
	 */
	private void initComponent() {

		mnuNew = new JMenuItem("New scenario");
		mnuNew.addActionListener(this);
		add(mnuNew);

		mnuRename = new JMenuItem("Rename");
		mnuRename.addActionListener(this);
		add(mnuRename);

		mnuDelete = new JMenuItem("Delete");
		mnuDelete.addActionListener(this);
		add(mnuDelete);

		add(new JSeparator());

		mnuOpen = new JMenuItem("Open");
		mnuOpen.addActionListener(this);
		add(mnuOpen);
	}

	/**
	 * Return the scenario concerned by this popup.
	 * 
	 * @return the scenario
	 */
	public Scenario getScenario() {
		return scenario;
	}

	/**
	 * Sets the scenario concerned by this popup.
	 * 
	 * @param scenario
	 *            the scenario to set
	 */
	public void setScenario(Scenario scenario) {
		this.scenario = scenario;
	}

	/**
	 * Clear menu state
	 */
	public void clearMenuState() {
		
		mnuNew.setEnabled(false);
		mnuRename.setEnabled(false);
		mnuDelete.setEnabled(false);
		mnuOpen.setEnabled(false);
	}
	
	/**
	 * Enable/disable new menu
	 */
	public void setCreateMenuState(boolean state) {
		mnuNew.setEnabled(state);
	}

	/**
	 * Enable/disable rename menu
	 */
	public void setRenameMenuState(boolean state) {
		mnuRename.setEnabled(state);
	}

	/**
	 * Enable/disable delete menu
	 */
	public void setDeleteMenuState(boolean state) {
		mnuDelete.setEnabled(state);
	}

	/**
	 * Enable/disable edit menu
	 */
	public void setOpenMenuState(boolean state) {
		mnuOpen.setEnabled(state);
	}

	/**
	 * Handle action generated by menu.
	 */
	public void actionPerformed(ActionEvent e) {

		if (e.getSource() == mnuNew) {
			appManager.createNewScenario();
		}
		else if (e.getSource() == mnuRename) {
			appManager.renameScenario(scenario);
		}
		else if (e.getSource() == mnuDelete) {
			appManager.deleteScenario(scenario);
		}
		else if (e.getSource() == mnuOpen) {
			appManager.showScenario(scenario);
		}
	}
}
