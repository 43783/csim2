package ch.hesge.csim2.ui.comp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.SwingUtilities;

import ch.hesge.csim2.core.model.Scenario;
import ch.hesge.csim2.ui.views.MainView;
import ch.hesge.csim2.ui.views.ScenarioView;

@SuppressWarnings("serial")
public class ScenarioPopup extends JPopupMenu implements ActionListener {

	// Private attributes
	private Scenario scenario;
	private JMenuItem mnuNew;
	private JMenuItem mnuOpen;
	private JMenuItem mnuStart;
	private JMenuItem mnuStop;
	private JMenuItem mnuDelete;

	/**
	 * Default constructor
	 */
	public ScenarioPopup() {
		initComponent();
	}

	/**
	 * Initialize the component
	 */
	private void initComponent() {

		mnuNew = new JMenuItem("Create a new scenario");
		mnuNew.addActionListener(this);
		add(mnuNew);

		mnuDelete = new JMenuItem("Delete the scenario");
		mnuDelete.addActionListener(this);
		add(mnuDelete);

		add(new JSeparator());

		mnuOpen = new JMenuItem("Open the scenario");
		mnuOpen.addActionListener(this);
		add(mnuOpen);

		mnuStart = new JMenuItem("Start the scenario");
		mnuStart.addActionListener(this);
		add(mnuStart);

		mnuStop = new JMenuItem("Stop the scenario");
		mnuStop.addActionListener(this);
		add(mnuStop);
	}

	/**
	 * Return the scenario concerned by this popup.
	 * 
	 * @return the scenario
	 */
	public Scenario getScenario() {
		return scenario;
	}

	/**
	 * Sets the scenario concerned by this popup.
	 * 
	 * @param scenario
	 *            the scenario to set
	 */
	public void setScenario(Scenario scenario) {
		this.scenario = scenario;
	}

	/**
	 * Clear menu state
	 */
	public void clearMenuState() {
		
		mnuNew.setEnabled(false);
		mnuOpen.setEnabled(false);
		mnuStart.setEnabled(false);
		mnuStop.setEnabled(false);
		mnuDelete.setEnabled(false);
	}
	
	/**
	 * Enable/disable new menu
	 */
	public void setCreateMenuState(boolean state) {
		mnuNew.setEnabled(state);
	}

	/**
	 * Enable/disable edit menu
	 */
	public void setOpenMenuState(boolean state) {
		mnuOpen.setEnabled(state);
	}

	/**
	 * Enable/disable start menu
	 */
	public void setStartMenuState(boolean state) {
		mnuStart.setEnabled(state);
	}

	/**
	 * Enable/disable stop menu
	 */
	public void setStopMenuState(boolean state) {
		mnuStop.setEnabled(state);
	}

	/**
	 * Enable/disable delete menu
	 */
	public void setDeleteMenuState(boolean state) {
		mnuDelete.setEnabled(state);
	}

	/**
	 * Handle action generated by menu.
	 */
	public void actionPerformed(ActionEvent e) {

		MainView mainView = (MainView) SwingUtilities.getAncestorOfClass(MainView.class, this.getInvoker());

		if (e.getSource() == mnuNew) {
			JOptionPane.showMessageDialog(mainView, "This feature is not yet implemented !", "Warning", JOptionPane.WARNING_MESSAGE);
		}
		else if (e.getSource() == mnuOpen) {
			mainView.showScenario(scenario);
		}
		else if (e.getSource() == mnuStart) {
			ScenarioView view = (ScenarioView) SwingUtilities.getAncestorOfClass(ScenarioView.class, this.getInvoker());
			view.startScenario();
		}
		else if (e.getSource() == mnuStop) {
			ScenarioView view = (ScenarioView) SwingUtilities.getAncestorOfClass(ScenarioView.class, this.getInvoker());
			view.stopScenario();
		}
		else if (e.getSource() == mnuDelete) {
			JOptionPane.showMessageDialog(mainView, "This feature is not yet implemented !", "Warning", JOptionPane.WARNING_MESSAGE);
		}
	}

}
