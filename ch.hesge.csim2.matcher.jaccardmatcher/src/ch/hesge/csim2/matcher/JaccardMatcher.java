/**
 * 
 */
package ch.hesge.csim2.matcher;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ch.hesge.csim2.core.logic.ApplicationLogic;
import ch.hesge.csim2.core.model.Concept;
import ch.hesge.csim2.core.model.IMethodConceptMatcher;
import ch.hesge.csim2.core.model.MethodConceptMatch;
import ch.hesge.csim2.core.model.Project;
import ch.hesge.csim2.core.model.SourceMethod;
import ch.hesge.csim2.core.model.StemConcept;
import ch.hesge.csim2.core.model.StemMethod;

/**
 * This engine allow trace files generated by instrumentation to be loaded into
 * database.
 * 
 * Copyright HEG Geneva 2014, Switzerland
 * 
 * @author Eric Harth
 *
 */
public class JaccardMatcher implements IMethodConceptMatcher {

	// Private attributes
	private Map<Integer, Concept> conceptMap;
	private Map<Integer, SourceMethod> methodMap;
	private Map<Integer, StemConcept> stemConceptTreeMap;
	private Map<Integer, StemMethod> stemMethodTreeMap;

	private List<StemMethod> matchingMethodStems;
	private List<StemConcept> matchingConceptStems;

	/**
	 * Default constructor
	 */
	public JaccardMatcher() {
		matchingMethodStems = new ArrayList<>();
		matchingConceptStems = new ArrayList<>();
	}

	/**
	 * Get the engine name.
	 * @see ch.hesge.csim2.core.shell.IEngine#getName()
	 */
	@Override
	public String getName() {
		return "JaccardMatcher";
	}

	/**
	 * Get the engine version.
	 * @see ch.hesge.csim2.core.shell.IEngine#getVersion()
	 */
	@Override
	public String getVersion() {
		return "1.0.1";
	}

	/**
	 * Get the engine description
	 * @see ch.hesge.csim2.core.shell.IEngine#getDescription()
	 */
	@Override
	public String getDescription() {
		return "method concept matcher based on jaccard comparison.";
	}

	/**
	 * Retrieve a map of all MethodConceptMatch classified by method Id.
	 * 
	 * @param project
	 *        the project where to calculate matching
	 * @return
	 *         a map of (MethodId, List<MethodConceptMatch>)
	 */
	public Map<Integer, List<MethodConceptMatch>> getMethodMatchingMap(Project project) {

		List<MethodConceptMatch> matchings = new ArrayList<>();

		// Load concept, method and stem data
		conceptMap = ApplicationLogic.getConceptMap(project);
		methodMap = ApplicationLogic.getSourceMethodMap(project);
		stemConceptTreeMap = ApplicationLogic.getStemConceptTreeMap(project);
		stemMethodTreeMap = ApplicationLogic.getStemMethodTreeMap(project);

		double maxWeight = 0d;

		// Scan all method and lookup for matching concepts
		for (SourceMethod method : methodMap.values()) {
			for (Concept concept : conceptMap.values()) {

				matchingMethodStems.clear();
				matchingConceptStems.clear();

				double similarity = getMethodConceptSimilarity(method, concept);

				// Register result within the matchMap
				if (similarity > 0d) {

					MethodConceptMatch match = new MethodConceptMatch();

					match.setProject(project);
					match.setSourceClass(method.getSourceClass());
					match.setSourceMethod(method);
					match.setConcept(concept);
					match.setWeight(similarity);
					match.getStemMethods().addAll(matchingMethodStems);
					match.getStemConcepts().addAll(matchingConceptStems);

					matchings.add(match);
					maxWeight = Math.max(maxWeight, similarity);
				}
			}
		}

		Map<Integer, List<MethodConceptMatch>> matchingMap = new HashMap<>();

		// Now build a map of concept matching, classified by method id
		for (MethodConceptMatch match : matchings) {

			// Normalize weights
			match.setWeight(match.getWeight() / maxWeight);

			if (match.getWeight() > 0d) {

				// Create an method list if not already initialized
				if (!matchingMap.containsKey(match.getSourceMethod().getKeyId())) {
					matchingMap.put(match.getSourceMethod().getKeyId(), new ArrayList<>());
				}

				// Add the match to the array for the specific method
				matchingMap.get(match.getSourceMethod().getKeyId()).add(match);
			}
		}

		return matchingMap;
	}

	/**
	 * Compute similarity between a method and a concept.
	 * 
	 * @param method
	 * @param concept
	 * @return a similarity weight
	 */
	private double getMethodConceptSimilarity(SourceMethod method, Concept concept) {

		double similarity = 0d;

		StemMethod methodRootStem = stemMethodTreeMap.get(method.getKeyId());
		List<StemMethod> methodStems = ApplicationLogic.inflateStemMethods(methodRootStem);

		StemConcept conceptRootStem = stemConceptTreeMap.get(concept.getKeyId());
		List<StemConcept> conceptStems = ApplicationLogic.inflateStemConcepts(conceptRootStem);

		// Build a map of all concept term
		Map<String, List<StemConcept>> conceptTermMap = new HashMap<>();
		for (StemConcept stem : conceptStems) {
			if (!conceptTermMap.containsKey(stem.getTerm())) {
				conceptTermMap.put(stem.getTerm(), new ArrayList<>());
			}
			conceptTermMap.get(stem.getTerm()).add(stem);
		}

		// Build a map of all method term
		Map<String, List<StemMethod>> methodTermMap = new HashMap<>();
		for (StemMethod stem : methodStems) {
			if (!methodTermMap.containsKey(stem.getTerm())) {
				methodTermMap.put(stem.getTerm(), new ArrayList<>());
			}
			methodTermMap.get(stem.getTerm()).add(stem);
		}

		// Now compute term intersection count
		int intersectionCount = 0;
		
		for (String term : methodTermMap.keySet()) {
			
			if (conceptTermMap.containsKey(term)) {

				intersectionCount++;

				matchingMethodStems.addAll(methodTermMap.get(term));
				matchingConceptStems.addAll(conceptTermMap.get(term));						
			}
		}
		
		similarity = intersectionCount / (methodStems.size() + conceptStems.size());
		
		return similarity;
	}
}
